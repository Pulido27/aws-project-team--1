import multiprocessing
import json
import struct
import time
from pathlib import Path
from gen_dic import indices  # Importar diccionario

def dividir_carpetas(ruta, num_procesos):
    carpetas = [carpeta for carpeta in ruta.iterdir() if carpeta.is_dir()]
    tamaño_bloque = len(carpetas) // num_procesos
    partes = [carpetas[i:i + tamaño_bloque] for i in range(0, len(carpetas), tamaño_bloque)]

    if len(partes) > num_procesos:
        partes[-2].extend(partes[-1])
        partes.pop()

    return partes

def procesar_carpeta(parte, lock, indices):
    start_time = time.time()  # Iniciar el tiempo para el procesamiento de las carpetas
    buffers = {}
    for carpeta in parte:
        ruta_json = carpeta / "metadata.json"
        contenidoJson = ruta_json.read_text(encoding='utf-8')
        objPy = json.loads(contenidoJson)

        ruta_txt = carpeta / f"{carpeta.name}_djvu.txt"
        contenidoTxt = ruta_txt.read_text(encoding='utf-8')   

        palabrasLib = set()
        palabra = []
        titulo = objPy["title"]

        for letra in contenidoTxt:
            if letra.isalpha():
                palabra.append(letra)
            elif palabra:
                palabra_str = "".join(palabra).lower() 
                palabrasLib.add(palabra_str)
                palabra.clear()
        
        for palabra in palabrasLib:
            if len(palabra) > 3 and len(palabra) < 15:
                if palabra not in buffers:
                    buffers[palabra] = []
                buffers[palabra].append(struct.pack("I", indices[titulo]))

        if len(buffers) > 1000000:
            for palabra, data in buffers.items():
                palabra_ruta = Path(f"/home/ubuntu/python_code/work/y/{palabra}")
                with lock:
                    with palabra_ruta.open("ab") as f:
                        f.writelines(data)
            buffers.clear()
    end_time = time.time()  # Fin del tiempo de procesamiento de las carpetas
    print(f"Tiempo de procesamiento de carpetas: {end_time- start_time} segundos")
    
    start_time = time.time()
    
    for palabra, data in buffers.items():
        palabra_ruta = Path(f"/home/ubuntu/python_code/work/y/{palabra}")
        with lock:
            with palabra_ruta.open("ab") as f:
                f.writelines(data)
    end_time = time.time()  # Fin del tiempo de escritura
    print(f"Tiempo de escritura: {end_time- start_time} segundos")

    
def main():
    lock = multiprocessing.Lock()
    ruta = Path("/home/ubuntu/python_code/work/muestras")   
    num_procesos = 10 
    partes_carpetas = dividir_carpetas(ruta, num_procesos)   

    procesos = []
    for parte in partes_carpetas:
        p = multiprocessing.Process(target=procesar_carpeta, args=(parte, lock, indices))
        procesos.append(p)
        p.start()

    for p in procesos:
        p.join()


if __name__ == "__main__":
    main()